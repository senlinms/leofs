#======================================================================
# LeoFS - Storage Configuration
#======================================================================
## --------------------------------------------------------------------
## SASL
## --------------------------------------------------------------------
## See: http://www.erlang.org/doc/man/sasl_app.html
##
## The following configuration parameters are defined for
## the SASL application. See app(4) for more information
## about configuration parameters

## SASL error log path
## sasl.sasl_error_log = ./log/sasl/sasl-error.log

## Restricts the error logging performed by the specified sasl_error_logger
## to error reports, progress reports, or both.
## errlog_type = [error | progress | all]
## sasl.errlog_type = error

## Specifies in which directory the files are stored.
## If this parameter is undefined or false, the error_logger_mf_h is not installed.
# sasl.error_logger_mf_dir = ./log/sasl

## Specifies how large each individual file can be.
## If this parameter is undefined, the error_logger_mf_h is not installed.
## sasl.error_logger_mf_maxbytes = 10485760

## Specifies how many files are used.
## If this parameter is undefined, the error_logger_mf_h is not installed.
## sasl.error_logger_mf_maxfiles = 5

## --------------------------------------------------------------------
## Manager's Node(s)
## --------------------------------------------------------------------
## Name of Manager node(s)
managers = [manager_0@127.0.0.1, manager_1@127.0.0.1]

## --------------------------------------------------------------------
## STORAGE
## --------------------------------------------------------------------
## Object container
obj_containers.path = [./avs]
obj_containers.num_of_containers = [8]

## e.g. Case of plural pathes
## obj_containers.path = [/var/leofs/avs/1, /var/leofs/avs/2]
## obj_containers.num_of_containers = [32, 64]

## Metadata Storage: [bitcask, leveldb] - default:leveldb
obj_containers.metadata_storage = leveldb

## A number of virtual-nodes for the redundant-manager
## num_of_vnodes = 168

## Enable strict check between checksum of a metadata and checksum of an object
## - default:faluse
## object_storage.is_strict_check = false


## --------------------------------------------------------------------
## STORAGE - Watchdog
## --------------------------------------------------------------------
##
##  Watchdog.REX(RPC)
##
## rex - watch interval - default:5sec
## watchdog.rex.interval = 5

## Threshold memory capacity of binary for rex(rpc) - default:32MB
watchdog.rex.threshold_mem_capacity = 33554432


##
##  Watchdog.CPU
##
## Is cpu-watchdog enabled - default:false
watchdog.cpu.is_enabled = true

## cpu - raised error times
watchdog.cpu.raised_error_times = 3

## cpu - watch interval - default:5sec
watchdog.cpu.interval = 5

## Threshold CPU load avg for 1min/5min
watchdog.cpu.threshold_cpu_load_avg = 5.0

## Threshold CPU load util - default:100 = "100%"
watchdog.cpu.threshold_cpu_util = 100


##
##  Watchdog.IO
##
## Is io-watchdog enabled - default:false
## watchdog.io.is_enabled = true

## io - watch interval - default:1sec
watchdog.io.interval = 1

## Threshold input size/sec  - default:134217728(B) - 128MB/sec
watchdog.io.threshold_input_per_sec = 134217728

## Threshold output size/sec - default:134217728(B) - 128MB/sec
watchdog.io.threshold_output_per_sec = 134217728


##
##  Watchdog.DISK
##
## Is disk-watchdog enabled - default:true
watchdog.disk.is_enabled = true

## disk - raised error times
watchdog.disk.raised_error_times = 3

## disk - watch interval - default:1sec
watchdog.disk.interval = 5

## Threshold disk use% - defalut:85%
watchdog.disk.threshold_disk_use = 80

## Threshold disk util% - defalut:100%
watchdog.disk.threshold_disk_use = 100

## Threshold disk read kb/sec - defalut:131072(KB)
watchdog.disk.threshold_disk_rkb = 131072

## Threshold disk write kb/sec - defalut:65536(KB)
watchdog.disk.threshold_disk_wkb = 131072

##
##  Watchdog.Cluster
##
## Is cluster-watchdog enabled - default:false
watchdog.cluster.is_enabled = true

## cluster - watch interval - default:1sec
watchdog.cluster.interval = 10


## --------------------------------------------------------------------
## STORAGE - Autonomic Operation
## --------------------------------------------------------------------
## [compaction] enabled compaction? - default:false
autonomic_op.compaction.is_enabled = true

## [compaction] number of parallel procs - default:1
## autonomic_op.compaction.parallel_procs = 1

## [compaction] warning ratio of active size - default:70%
## autonomic_op.compaction.warn_active_size_ratio = 70

## [compaction] threshold ratio of active size - default:60%
## autonomic_op.compaction.threshold_active_size_ratio = 60


## --------------------------------------------------------------------
## STORAGE - Data Compcation
## --------------------------------------------------------------------
## Limit of a number of procs to execute data-compaction in parallel
##compaction.limit_num_of_compaction_procs = 4

## Minimum value of compaction-proc waiting time/batch-proc(msec)
##compaction.waiting_time_min = 100

## Regular value of compaction-proc waiting time/batch-proc(msec)
##compaction.waiting_time_regular = 300

## Maximum value of compaction-proc waiting time/batch-proc(msec)
##compaction.waiting_time_max = 1000

## Step of compaction-proc waiting time(msec)
##compaction.waiting_time_step = 100


## Minimum compaction batch processes
##compaction.batch_procs_min = 1000

## Regular compaction batch processes
##compaction.batch_procs_regular = 10000

## Maximum compaction batch processes
##compaction.batch_procs_max = 100000

## Step compaction batch processes
##compaction.batch_procs_step = 1000


## --------------------------------------------------------------------
## STORAGE - MQ
## --------------------------------------------------------------------
## MQ backend storage: [bitcask, leveldb] - default:bitcask
## mq.backend_db = bitcask

## A number of mq-server's processes
## mq.num_of_mq_procs = 8

##
## [Number of bach processes of message]
##
## Minimum number of bach processes of message
mq.num_of_batch_process_min = 100

## Maxmim  number of bach processes of message
mq.num_of_batch_process_max = 10000

## Maxmim  number of bach processes of message
mq.num_of_batch_process_regular = 1000

## Maxmim  number of bach processes of message
mq.num_of_batch_process_step = 100


## --------------------------------------------------------------------
## STORAGE - Replication/Recovery object(s)
## --------------------------------------------------------------------
## Rack-id for the rack-awareness replica placement
## replication.rack_awareness.rack_id =

## Size of stacked objects (bytes)
## replication.recovery.size_of_stacked_objs = 67108864

## Stacking timeout (msec)
## replication.recovery.stacking_timeout = 5000


## --------------------------------------------------------------------
## STORAGE - Log
## --------------------------------------------------------------------
## Log level: [0:debug, 1:info, 2:warn, 3:error]
log.log_level = 0

## Output log file(s) - Erlang's log
## log.erlang = ./log/erlang

## Output log file(s) - app
## log.app = ./log/app

## Output log file(s) - members of storage-cluster
## log.member_dir = ./log/ring

## Output log file(s) - ring
## log.ring_dir = ./log/ring

## Output data-diagnosis log
log.is_enable_diagnosis_log = true


## --------------------------------------------------------------------
## STORAGE - Other Directories
## --------------------------------------------------------------------
## Directory of queue for monitoring "RING"
## queue_dir  = ./work/queue

## Directory of SNMP agent configuration
snmp_agent = ./snmp/snmpa_storage_0/LEO-STORAGE


## --------------------------------------------------------------------
## Other Libs
## --------------------------------------------------------------------
## MQ backend storage: [bitcask, leveldb]
## leo_mq.backend_db = bitcask

## Enable strict check between checksum of a metadata and checksum of an object
## leo_object_storage.is_strict_check = false

## Metadata Storage: [bitcask, leveldb]
leo_object_storage.metadata_storage = leveldb

## Send after interval
## leo_ordning_reda.send_after_interval = 100


## --------------------------------------------------------------------
## RPC
## --------------------------------------------------------------------
## RPC-Server's acceptors
rpc.server.acceptors = 16

## RPC-Server's listening port number
rpc.server.listen_port = 13077

## RPC-Server's listening timeout
rpc.server.listen_timeout = 30000

## RPC-Client's size of connection pool
rpc.client.connection_pool_size = 16

## RPC-Client's size of connection buffer
rpc.client.connection_buffer_size = 16


## --------------------------------------------------------------------
## Profiling
## --------------------------------------------------------------------
## Enable profiler - leo_backend_db
## leo_backend_db.profile = false

## Enable profiler - leo_logger
## leo_logger.profile = false

## Enable profiler - leo_mq
## leo_mq.profile = false

## Enable profiler - leo_object_storage
## leo_object_storage.profile = false

## Enable profiler - leo_ordning_reda
## leo_ordning_reda.profile = false

## Enable profiler - leo_redundant_manager
## leo_redundant_manager.profile = false

## Enable profiler - leo_rpc
## leo_rpc.profile = false

## Enable profiler - leo_statistics
## leo_statistics.profile = false


## --------------------------------------------------------------------
## MANAGER - Mnesia
##     * Store the info storage-cluster and the info of gateway(s)
##     * Store the RING and the command histories
## --------------------------------------------------------------------
## The write threshold for transaction log dumps
## as the number of writes to the transaction log
mnesia.dump_log_write_threshold = 50000

## Controls how often disc_copies tables are dumped from memory
mnesia.dc_dump_limit = 40


#======================================================================
# For vm.args
#======================================================================
## Name of the leofs-storage node
nodename = storage_0@127.0.0.1

## Cookie for distributed node communication.  All nodes in the same cluster
## should use the same cookie or they will not be able to communicate.
distributed_cookie = 401321b4

## Enable kernel poll
erlang.kernel_poll = true

## Number of async threads
erlang.asyc_threads = 32

## Increase number of concurrent ports/sockets
erlang.max_ports = 64000

## Set the location of crash dumps
erlang.crash_dump = ./log/erl_crash.dump

## Raise the ETS table limit
erlang.max_ets_tables = 256000

## Raise the default erlang process limit
process_limit = 1048576

## Path of SNMP-agent configuration
snmp_conf = ./snmp/snmpa_storage_0/leo_storage_snmp
